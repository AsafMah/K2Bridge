1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ . }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "k2bridge.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "k2bridge.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "k2bridge.fullname" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  echo "Use http://127.0.0.1:8080 to connect to K2Bridge"
  kubectl port-forward service/{{ include "k2bridge.fullname" .}} 8080
{{- end }}

2. Wait for the K2Bridge and internal Elasticseach pods to be fully started.
It can take several minutes to obtain persistent storage from the cloud
provider the first time.
   kubectl get pods

3. Optionally deploy Kibana by running these commands:
  echo "Use this command to install Kibana"
  helm install kibana elastic/kibana --set image=docker.elastic.co/kibana/kibana-oss --set imageTag={{ .Values.k2bridgeelasticsearch.imageTag }} --set elasticsearchHosts=http://{{ include "k2bridge.fullname" . }}:{{ .Values.service.port }}
  echo "Use http://127.0.0.1:5601 to connect to Kibana"
  kubectl port-forward service/kibana-kibana 5601
