# CI/CD Azure DevOps deployment pipeline.
# The following variables can be optionally set for each pipeline run:
# - RUN_FLAG_TERRAFORM: Set to 1 to have `terraform apply`. By default
#   `terraform apply` only runs on the master branch.
# - RUN_FLAG_PROMOTE: Set to 1 to promote the Docker image to `latest` tag if
#   tests are successful. By default this is only done on the master branch.
# - RUN_SET_NAMESPACE: Set to a string to deploy to the given AKS namespace,
#   and not delete the namespace after the build. By default the build deploys to
#   the `master` AKS namespace if run on the master branch, and otherwise to a
#   temporary AKS namespace that is deleted at the end of the build.

trigger:
  branches:
    include:
    - master
    - development

pr:
  branches:
    include:
    - master
    - development
  paths:
    exclude:
    - '*.md'

name: $(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

variables:
- group: K2Bridge CI-CD pipeline
- name: SEMANTIC_VERSION
  value: "0.0.$(Build.BuildId)"
- name: KUSTO_DB
  value: "build$(Build.BuildId)"

pool:
  vmImage: ubuntu-latest

stages:

- stage: CI

  jobs:

  - job: Security_analysis
    displayName: Security Analysis

    pool:
      # CredScan only runs on Windows
      vmImage: 'windows-latest'

    steps:
    - task: CredScan@2
      displayName: 'Find credentials in source code'
      inputs:
        toolMajorVersion: 'V2'

    - task: SdtReport@1
      displayName: 'Security analysis report'
      inputs:
        AllTools: false
        APIScan: false
        BinSkim: false
        CodesignValidation: false
        CredScan: true
        FortifySCA: false
        FxCop: false
        ModernCop: false
        MSRD: false
        PoliCheck: false
        RoslynAnalyzers: false
        SDLNativeRules: false
        Semmle: false
        TSLint: false
        ToolLogsNotFoundAction: 'Standard'

    - task: PublishSecurityAnalysisLogs@2
      displayName: 'Publish security analysis logs'
      inputs:
        ArtifactName: 'CodeAnalysisLogs'
        ArtifactType: 'Container'
        AllTools: false
        AntiMalware: false
        APIScan: false
        BinSkim: false
        CodesignValidation: false
        CredScan: true
        FortifySCA: false
        FxCop: false
        ModernCop: false
        MSRD: false
        PoliCheck: false
        RoslynAnalyzers: false
        SDLNativeRules: false
        Semmle: false
        TSLint: false
        WebScout: false
        ToolLogsNotFoundAction: 'Standard'

    - task: PostAnalysis@1
      displayName: 'Post security analysis'
      inputs:
        AllTools: false
        APIScan: false
        BinSkim: false
        CodesignValidation: false
        CredScan: true
        FortifySCA: false
        FxCop: false
        ModernCop: false
        PoliCheck: false
        RoslynAnalyzers: false
        SDLNativeRules: false
        Semmle: false
        TSLint: false
        VstsConsole: false
        ToolLogsNotFoundAction: 'Standard'

    - task: ComponentGovernanceComponentDetection@0
      inputs:
        scanType: 'Register'
        verbosity: 'Verbose'
        alertWarningLevel: 'Medium'
        failOnAlert: true

  - job: Build

    steps:

    - bash: |
        # Only build first stage of Dockerfile (build and unit test)
        docker build --target build -t k2bridge-build .
        # Temporarily create container in order to extract test results file
        id=$(docker create k2bridge-build)
        docker cp $id:/app/TestResult.xml .
        docker rm $id
      displayName: Docker build & test

    - task: PublishTestResults@2
      displayName: Publish test results
      condition: succeededOrFailed()
      inputs:
        testRunner: VSTest
        testResultsFiles: 'TestResult.xml'
        failTaskOnFailedTests: true

    - task: HelmInstaller@1
      displayName: Helm installer
      inputs:
        helmVersionToInstall: $(HELM_VERSION)

    - task: AzureCLI@1
      displayName: Push to ACR
      inputs:
        azureSubscription: $(ACR_PUSH_SERVICE_CONNECTION)
        scriptLocation: inlineScript
        inlineScript: |
          set -eux  # fail on error

          # Build and push Docker image
          az configure --defaults acr="$ACR_NAME"
          az acr login
          # Reuses the cached build stage from the previous docker build task
          docker build \
            -t "$ACR_NAME.azurecr.io/k2bridge:$SEMANTIC_VERSION" \
            .
          docker push "$ACR_NAME.azurecr.io/k2bridge:$SEMANTIC_VERSION"

          # Build end-to-end test image
          docker build \
            --target end2endtest \
            -t "$ACR_NAME.azurecr.io/k2bridge-test:$SEMANTIC_VERSION" \
            .
          docker push "$ACR_NAME.azurecr.io/k2bridge-test:$SEMANTIC_VERSION"

          # Push Helm chart
          helm repo add elastic https://helm.elastic.co
          helm repo update
          helm dependency update charts/k2bridge
          empty_dir="$(Build.StagingDirectory)/charts_out"
          helm package --version "$SEMANTIC_VERSION" charts/k2bridge -d $empty_dir
          az acr helm push --force "$(ls $empty_dir/*)"

  - job: Terraform
    steps:

    - bash: |
        set -eu
        az login --service-principal --username $(AKS_SP_CLIENT_ID) --password "$password" --tenant $(TENANT_ID)
        oid=$(az ad sp show --id  $(AKS_SP_CLIENT_ID) --query objectId -o tsv)
        echo "##vso[task.setvariable variable=AKS_SP_OBJECT_ID]$oid"
      displayName: Get AKS SP object ID
      env:
        password: $(AKS_SP_CLIENT_SECRET)

    - template: infrastructure/terraform-tasks-template.yml
      parameters:
        TerraformArguments: >-
          -var resource_group=$(RESOURCE_GROUP)
          -var vnet_name=$(VNET_NAME)
          -var aks_name=$(AKS_NAME)
          -var aks_version=$(AKS_VERSION)
          -var aks_sp_client_id=$(AKS_SP_CLIENT_ID)
          -var aks_sp_object_id=$(AKS_SP_OBJECT_ID)
          -var kusto_name=$(KUSTO_NAME)
          -var kusto_admin_sp_object_id=$(AKS_SP_OBJECT_ID)
        # For additional security, pass secret through environment instead of command line.
        # Terraform recognizes TF_VAR prefixed environment variables.
        TerraformEnvVariables:
          TF_VAR_aks_sp_client_secret: $(AKS_SP_CLIENT_SECRET)

  - job: Deploy_Kusto 
    displayName: Provision Kusto database 
    dependsOn:
    - Terraform

    steps:

        - task: AzureCLI@1
          displayName: Provision Kusto database
          inputs:
            azureSubscription: $(ACR_PULL_SERVICE_CONNECTION)
            scriptLocation: inlineScript
            inlineScript: |
              set -eux  # fail on error
              az kusto database create -g "$(RESOURCE_GROUP)" --cluster-name "$(KUSTO_NAME)" -n "$(KUSTO_DB)"

  - job: Deploy_K2Bridge 
    displayName: Deploy K2Bridge 
    dependsOn:
    - Build
    - Security_analysis
    - Terraform
    steps:

    - template: infrastructure/setup-k8s-clients-template.yml

    - task: AzureCLI@1
      displayName: Log into ACR Helm repo
      inputs:
        azureSubscription: $(ACR_PULL_SERVICE_CONNECTION)
        scriptLocation: inlineScript
        inlineScript: |
          set -eu  # fail on error
          az acr helm repo add -n "$(ACR_NAME)"
          KUSTO_URI=$(az kusto cluster show -g $(RESOURCE_GROUP) -n $(KUSTO_NAME) --query uri -o tsv)
          echo "##vso[task.setvariable variable=KUSTO_URI]$KUSTO_URI"

    - bash: |
        set -eux  # fail on error
        helm show chart $(ACR_NAME)/k2bridge
        # List charts before deploying (for job log, useful if rerunning job)
        helm list
        # Deploy chart
        helm upgrade --install k2bridge $(ACR_NAME)/k2bridge \
          --version "$SEMANTIC_VERSION" \
          --wait --timeout 45m \
          --set image.repository=$(ACR_NAME).azurecr.io/k2bridge \
          --set image.tag=$SEMANTIC_VERSION \
          --set replicaCount=2 \
          --set settings.kustoClusterUrl="$KUSTO_URI" \
          --set settings.kustoDatabase="$(KUSTO_DB)" \
          --set settings.kustoAadClientId="$(AKS_SP_CLIENT_ID)" \
          --set settings.kustoAadClientSecret="$secret" \
          --set settings.kustoAadTenantId="$TENANT_ID"
        # List charts after deploying (for job log)
        helm list
      displayName: Install Helm chart
      env:
        secret: $(AKS_SP_CLIENT_SECRET)

    - bash: |
        set -eux
        kubectl run --attach --rm --restart=Never --image=curlimages/curl smoke-test-$RANDOM -- \
          --max-time 5 --retry 99999 --retry-max-time 1200 http://k2bridge:8080
      displayName: Smoke test

  - job: Deploy_Elasticsearch 
    displayName: Deploy Elasticsearch
    dependsOn:
    - Terraform
    variables:
      KUBERNETES_NAMESPACE: $[dependencies.Terraform.outputs['GenerateNS.KUBERNETES_NAMESPACE']]
    steps:

    - template: infrastructure/setup-k8s-clients-template.yml

    - bash: |
        set -eux  # fail on error
        helm list
        helm repo add elastic https://helm.elastic.co
        helm upgrade --install elasticsearchqa elastic/elasticsearch \
          --wait --timeout 45m \
          --set image=docker.elastic.co/elasticsearch/elasticsearch-oss \
          --set imageTag=6.8.5 \
          --set clusterName=elasticsearchqa
      displayName: Deploy Elasticsearch

  - job: Test 
    dependsOn:
    - Terraform
    - Deploy_Kusto
    - Deploy_K2Bridge
    - Deploy_Elasticsearch
    variables:
      KUBERNETES_NAMESPACE: $[dependencies.Terraform.outputs['GenerateNS.KUBERNETES_NAMESPACE']]
    steps:

    - template: infrastructure/setup-k8s-clients-template.yml

    - task: AzureCLI@1
      displayName: End-to-end test
      inputs:
        azureSubscription: $(ACR_PULL_SERVICE_CONNECTION)
        scriptLocation: inlineScript
        inlineScript: |
          set -eux  # fail on error
          podName="e2e-test-$RANDOM"
          KUSTO_URI=$(az kusto cluster show -g $(RESOURCE_GROUP) -n $(KUSTO_NAME) --query uri -o tsv)
          AAD_TOKEN=$(az account get-access-token --resource "$KUSTO_URI" --query accessToken -o tsv)
          kubectl run --restart=Never \
            --image=$(ACR_NAME).azurecr.io/k2bridge-test:$SEMANTIC_VERSION \
            --env=K2BRIDGE_URL=http://k2bridge:8080 \
            --env=ELASTICSEARCH_URL=http://elasticsearchqa-master:9200 \
            --env=KUSTO_URI=$KUSTO_URI \
            --env=KUSTO_DB=$(KUSTO_DB) \
            --env=AAD_TOKEN=$AAD_TOKEN \
            "$podName"
          kubectl wait --timeout 45m --for=condition=ContainersReady pod "$podName"
          # Read test output from FIFO within container
          kubectl exec "$podName" cat /test-result-pipe > TestResult.xml
          kubectl delete pod "$podName"

    - task: PublishTestResults@2
      displayName: Publish test results
      condition: succeededOrFailed()
      inputs:
        testRunner: VSTest
        testResultsFiles: 'TestResult.xml'
        failTaskOnFailedTests: true

  - job: Promote
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), variables['RUN_FLAG_PROMOTE']))
    dependsOn:
    - Test
    steps:

    - task: AzureCLI@1
      displayName: Tag Docker image as latest
      inputs:
        azureSubscription: $(ACR_PUSH_SERVICE_CONNECTION)
        scriptLocation: inlineScript
        inlineScript: |
          set -eux  # fail on error
          az configure --defaults acr="$ACR_NAME"
          az acr login
          docker pull "$ACR_NAME.azurecr.io/k2bridge:$SEMANTIC_VERSION"
          docker tag \
            "$ACR_NAME.azurecr.io/k2bridge:$SEMANTIC_VERSION" \
            "$ACR_NAME.azurecr.io/k2bridge:latest"
          docker push "$ACR_NAME.azurecr.io/k2bridge:latest"

  - job: Cleanup 
    dependsOn:
    - Terraform
    - Test
    # Do not delete AKS namespace:
    # - if pipeline was canceled or failed before a Kubernetes namespace was generated
    # - if deploying on master branch
    # - if namespace was manually set with RUN_SET_NAMESPACE
    condition: and(always(), not(variables['RUN_SET_NAMESPACE']))
    steps:

    - template: infrastructure/setup-k8s-clients-template.yml

    - task: AzureCLI@1
      displayName: Delete AKS namespace and Kusto database
      condition: and(variables['KUBERNETES_NAMESPACE'], not(eq(variables['KUBERNETES_NAMESPACE'], 'master')))
      inputs:
        azureSubscription: $(ACR_PULL_SERVICE_CONNECTION)
        scriptLocation: inlineScript
        inlineScript: |
          set -eux  # fail on error
          kubectl delete namespace "$KUBERNETES_NAMESPACE"
          az kusto database delete -g "$(RESOURCE_GROUP)" --cluster-name "$(KUSTO_NAME)" -n "$(KUSTO_DB)" -y
