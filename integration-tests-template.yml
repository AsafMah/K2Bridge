parameters:
  name: integration
  displayName: Integration Tests
  suffix: 6
  elasticsearchVersion: 6.8.5

stages:
- stage: ${{ parameters.name }}
  displayName: ${{ parameters.displayName }}
  dependsOn:
  - build
  variables:
    KUSTO_DB_NAME: $(KUSTO_DB)${{ parameters.suffix }}
    CHART_NAME: k2bridge${{ parameters.suffix }}
    ES_QA_NAME: elasticsearchqa${{ parameters.suffix }}
  jobs:

  # Deploy a new Kusto db
  # Either if the db name is not set to 'demo' which means it is the Dev CI process
  # Or it is the Demo CI process AND the RUN_CREATE_DEMO_KUSTO was set
  - job: Deploy_Kusto
    displayName: Provision a new Kusto database
    condition: or(and(succeeded(), not(eq(variables['KUSTO_DB_NAME'], 'demo'))), and(succeeded(), eq(variables['KUSTO_DB_NAME'], 'demo'), variables['RUN_CREATE_DEMO_KUSTO']))
    steps:

        - task: AzureCLI@1
          displayName: Provision Kusto database
          inputs:
            azureSubscription: $(ACR_PULL_SERVICE_CONNECTION)
            scriptLocation: inlineScript
            inlineScript: |
              set -eux  # fail on error
              az kusto database create -g "$(RESOURCE_GROUP)" --cluster-name "$(KUSTO_NAME)" -n "$(KUSTO_DB_NAME)"

  - job: Deploy_K2Bridge
    displayName: Deploy K2Bridge
    variables:
      ${{ if ne(variables['Build.SourceBranchName'], 'master') }}:
        NOT_MASTER_ES_CONFIG: "--set elasticsearch.replicas=2 --set elasticsearch.minimumMasterNodes=2"
    steps:

    - template: infrastructure/setup-k8s-clients-template.yml

    - task: AzureCLI@1
      displayName: Log into ACR Helm repo
      inputs:
        azureSubscription: $(ACR_PULL_SERVICE_CONNECTION)
        scriptLocation: inlineScript
        inlineScript: |
          set -eu  # fail on error
          az acr helm repo add -n "$(ACR_NAME)"
          KUSTO_URI=$(az kusto cluster show -g $(RESOURCE_GROUP) -n $(KUSTO_NAME) --query uri -o tsv)
          echo "##vso[task.setvariable variable=KUSTO_URI]$KUSTO_URI"

    - bash: |
        set -eux  # fail on error
        helm show chart $(ACR_NAME)/k2bridge
        # List charts before deploying (for job log, useful if rerunning job)
        helm list
        # Deploy chart
        helm upgrade --install "$(CHART_NAME)" $(ACR_NAME)/k2bridge \
          --version "$SEMANTIC_VERSION" \
          --wait --timeout 30m \
          --set image.repository=$(ACR_NAME).azurecr.io/k2bridge \
          --set image.tag=$SEMANTIC_VERSION \
          --set replicaCount=2 \
          --set metadataElasticAddress="http://$(CHART_NAME)-es-master:9200" \
          --set elasticsearch.imageTag=${{ parameters.elasticsearchVersionÂ }} \
          --set elasticsearch.clusterName="$(CHART_NAME)-es" \
          --set elasticsearch.masterService="$(CHART_NAME)-es-master" \
          --set settings.adxClusterUrl="$KUSTO_URI" \
          --set settings.adxDefaultDatabaseName="$(KUSTO_DB_NAME)" \
          --set settings.aadClientId="$(AKS_SP_CLIENT_ID)" \
          --set settings.aadClientSecret="$secret" \
          --set settings.aadTenantId="$TENANT_ID" \
          --set settings.collectTelemetry="$COLLECT_TELEMETRY" \
          --set settings.instrumentationKey="$TELEMETRY_KEY" \
          ${NOT_MASTER_ES_CONFIG:-} #defaults to an empty string
        # List charts after deploying (for job log)
        helm list
      displayName: Install Helm chart
      env:
        secret: $(AKS_SP_CLIENT_SECRET)

    - bash: |
        set -eux
        kubectl run --attach --rm --restart=Never --image=curlimages/curl smoke-test-$RANDOM -- \
          --max-time 5 --retry 99999 --retry-max-time 1200 http://$(CHART_NAME):8080
      displayName: Smoke test

  - job: Deploy_Elasticsearch
    displayName: Deploy Elasticsearch
    steps:

    - template: infrastructure/setup-k8s-clients-template.yml

    - bash: |
        set -eux  # fail on error
        helm list
        helm repo add elastic https://helm.elastic.co
        helm upgrade --install "$(ES_QA_NAME)" elastic/elasticsearch \
          --wait --timeout 45m \
          --set image=docker.elastic.co/elasticsearch/elasticsearch-oss \
          --set imageTag=${{ parameters.elasticsearchVersion }} \
          --set clusterName="$(ES_QA_NAME)" \
          --set replicas=1 \
          --set persistence.enabled=false \
          --set minimumMasterNodes=1 \
          --set antiAffinity="soft" \
          --set esJavaOpts="-Xmx512m -Xms512m" \
          --set resources.requests.cpu="100m" \
          --set resources.requests.memory="1024M" \
          --set limits.cpu="1000m" \
          --set limits.memory="2048M"

      displayName: Deploy Elasticsearch

  - job: Test
    displayName: Run Tests
    dependsOn:
    - Deploy_Kusto
    - Deploy_K2Bridge
    - Deploy_Elasticsearch
    steps:

    - template: infrastructure/setup-k8s-clients-template.yml

    - task: AzureCLI@1
      displayName: End-to-end test
      inputs:
        azureSubscription: $(ACR_PULL_SERVICE_CONNECTION)
        scriptLocation: inlineScript
        inlineScript: |
          set -eu  # fail on error
          podName="e2e-test-$RANDOM"
          KUSTO_URI=$(az kusto cluster show -g $(RESOURCE_GROUP) -n $(KUSTO_NAME) --query uri -o tsv)
          AAD_TOKEN=$(az account get-access-token --resource "$KUSTO_URI" --query accessToken -o tsv)
          kubectl run --restart=Never \
            --image=$(ACR_NAME).azurecr.io/k2bridge-test:$SEMANTIC_VERSION \
            --env=K2BRIDGE_URL=http://$(CHART_NAME):8080 \
            --env=ELASTICSEARCH_URL=http://"$(ES_QA_NAME)"-master:9200 \
            --env=KUSTO_URI=$KUSTO_URI \
            --env=KUSTO_DB=$(KUSTO_DB_NAME) \
            --env=AAD_TOKEN=$AAD_TOKEN \
            "$podName"
          set -x  # enable verbose mode, without exposing $AAD_TOKEN
          kubectl wait --timeout 45m --for=condition=ContainersReady pod "$podName"
          # Read test output from FIFO within container
          kubectl exec "$podName" cat /test-result-pipe > TestResult.xml
          kubectl delete pod "$podName"

    - task: PublishTestResults@2
      displayName: Publish test results
      condition: succeededOrFailed()
      inputs:
        testRunner: VSTest
        testResultsFiles: 'TestResult.xml'
        failTaskOnFailedTests: true
        testRunTitle: 'E2E Tests'
